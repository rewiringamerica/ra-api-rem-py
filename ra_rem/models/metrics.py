# coding: utf-8

"""
    Dohyo

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from ra_rem.models.fuel_data import FuelData
from typing import Optional, Set
from typing_extensions import Self

class Metrics(BaseModel):
    """
    A class to represent metrics data.  Attributes ----------     samples (Dict[int, List[FuelData]]): A dictionary of sample IDs and their associated data for         energy, emissions, and cost.     mean (List[FuelData]): Mean data for energy, emissions, and cost.     median (List[FuelData]): Median data for energy, emissions, and cost.     percentile_20 (List[FuelData]): 20th percentile data for energy, emissions, and cost.     percentile_80 (List[FuelData]): 80th percentile data for energy, emissions, and cost.
    """ # noqa: E501
    mean: List[FuelData]
    median: List[FuelData]
    percentile_20: List[FuelData]
    percentile_80: List[FuelData]
    __properties: ClassVar[List[str]] = ["mean", "median", "percentile_20", "percentile_80"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Metrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mean (list)
        _items = []
        if self.mean:
            for _item_mean in self.mean:
                if _item_mean:
                    _items.append(_item_mean.to_dict())
            _dict['mean'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in median (list)
        _items = []
        if self.median:
            for _item_median in self.median:
                if _item_median:
                    _items.append(_item_median.to_dict())
            _dict['median'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in percentile_20 (list)
        _items = []
        if self.percentile_20:
            for _item_percentile_20 in self.percentile_20:
                if _item_percentile_20:
                    _items.append(_item_percentile_20.to_dict())
            _dict['percentile_20'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in percentile_80 (list)
        _items = []
        if self.percentile_80:
            for _item_percentile_80 in self.percentile_80:
                if _item_percentile_80:
                    _items.append(_item_percentile_80.to_dict())
            _dict['percentile_80'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Metrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mean": [FuelData.from_dict(_item) for _item in obj["mean"]] if obj.get("mean") is not None else None,
            "median": [FuelData.from_dict(_item) for _item in obj["median"]] if obj.get("median") is not None else None,
            "percentile_20": [FuelData.from_dict(_item) for _item in obj["percentile_20"]] if obj.get("percentile_20") is not None else None,
            "percentile_80": [FuelData.from_dict(_item) for _item in obj["percentile_80"]] if obj.get("percentile_80") is not None else None
        })
        return _obj


