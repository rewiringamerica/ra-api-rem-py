# coding: utf-8

"""
    Dohyo

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ra_rem.models.savings import Savings

class TestSavings(unittest.TestCase):
    """Savings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Savings:
        """Test Savings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Savings`
        """
        model = Savings()
        if include_optional:
            return Savings(
                baseline = ra_rem.models.impact.Impact(
                    energy = ra_rem.models.metrics.Metrics(
                        mean = [
                            ra_rem.models.fuel_data.FuelData(
                                fuel_type = '', 
                                value = 1.337, 
                                units = '', )
                            ], 
                        median = [
                            ra_rem.models.fuel_data.FuelData(
                                fuel_type = '', 
                                value = 1.337, 
                                units = '', )
                            ], 
                        percentile_20 = [
                            
                            ], 
                        percentile_80 = [
                            
                            ], ), 
                    emissions = ra_rem.models.metrics.Metrics(
                        mean = [
                            
                            ], 
                        median = [
                            
                            ], 
                        percentile_20 = [
                            
                            ], 
                        percentile_80 = [
                            
                            ], ), 
                    cost = , ),
                upgrade = ra_rem.models.impact.Impact(
                    energy = ra_rem.models.metrics.Metrics(
                        mean = [
                            ra_rem.models.fuel_data.FuelData(
                                fuel_type = '', 
                                value = 1.337, 
                                units = '', )
                            ], 
                        median = [
                            ra_rem.models.fuel_data.FuelData(
                                fuel_type = '', 
                                value = 1.337, 
                                units = '', )
                            ], 
                        percentile_20 = [
                            
                            ], 
                        percentile_80 = [
                            
                            ], ), 
                    emissions = ra_rem.models.metrics.Metrics(
                        mean = [
                            
                            ], 
                        median = [
                            
                            ], 
                        percentile_20 = [
                            
                            ], 
                        percentile_80 = [
                            
                            ], ), 
                    cost = , ),
                delta = ra_rem.models.impact.Impact(
                    energy = ra_rem.models.metrics.Metrics(
                        mean = [
                            ra_rem.models.fuel_data.FuelData(
                                fuel_type = '', 
                                value = 1.337, 
                                units = '', )
                            ], 
                        median = [
                            ra_rem.models.fuel_data.FuelData(
                                fuel_type = '', 
                                value = 1.337, 
                                units = '', )
                            ], 
                        percentile_20 = [
                            
                            ], 
                        percentile_80 = [
                            
                            ], ), 
                    emissions = ra_rem.models.metrics.Metrics(
                        mean = [
                            
                            ], 
                        median = [
                            
                            ], 
                        percentile_20 = [
                            
                            ], 
                        percentile_80 = [
                            
                            ], ), 
                    cost = , ),
                rates = [
                    ra_rem.models.fuel_data_rates.FuelDataRates(
                        fuel_type = '', 
                        value = 1.337, 
                        units = '', 
                        rate_type = 'volumetric', )
                    ],
                emissions_factors = [
                    ra_rem.models.fuel_data.FuelData(
                        fuel_type = '', 
                        value = 1.337, 
                        units = '', )
                    ]
            )
        else:
            return Savings(
                baseline = ra_rem.models.impact.Impact(
                    energy = ra_rem.models.metrics.Metrics(
                        mean = [
                            ra_rem.models.fuel_data.FuelData(
                                fuel_type = '', 
                                value = 1.337, 
                                units = '', )
                            ], 
                        median = [
                            ra_rem.models.fuel_data.FuelData(
                                fuel_type = '', 
                                value = 1.337, 
                                units = '', )
                            ], 
                        percentile_20 = [
                            
                            ], 
                        percentile_80 = [
                            
                            ], ), 
                    emissions = ra_rem.models.metrics.Metrics(
                        mean = [
                            
                            ], 
                        median = [
                            
                            ], 
                        percentile_20 = [
                            
                            ], 
                        percentile_80 = [
                            
                            ], ), 
                    cost = , ),
                upgrade = ra_rem.models.impact.Impact(
                    energy = ra_rem.models.metrics.Metrics(
                        mean = [
                            ra_rem.models.fuel_data.FuelData(
                                fuel_type = '', 
                                value = 1.337, 
                                units = '', )
                            ], 
                        median = [
                            ra_rem.models.fuel_data.FuelData(
                                fuel_type = '', 
                                value = 1.337, 
                                units = '', )
                            ], 
                        percentile_20 = [
                            
                            ], 
                        percentile_80 = [
                            
                            ], ), 
                    emissions = ra_rem.models.metrics.Metrics(
                        mean = [
                            
                            ], 
                        median = [
                            
                            ], 
                        percentile_20 = [
                            
                            ], 
                        percentile_80 = [
                            
                            ], ), 
                    cost = , ),
                delta = ra_rem.models.impact.Impact(
                    energy = ra_rem.models.metrics.Metrics(
                        mean = [
                            ra_rem.models.fuel_data.FuelData(
                                fuel_type = '', 
                                value = 1.337, 
                                units = '', )
                            ], 
                        median = [
                            ra_rem.models.fuel_data.FuelData(
                                fuel_type = '', 
                                value = 1.337, 
                                units = '', )
                            ], 
                        percentile_20 = [
                            
                            ], 
                        percentile_80 = [
                            
                            ], ), 
                    emissions = ra_rem.models.metrics.Metrics(
                        mean = [
                            
                            ], 
                        median = [
                            
                            ], 
                        percentile_20 = [
                            
                            ], 
                        percentile_80 = [
                            
                            ], ), 
                    cost = , ),
                rates = [
                    ra_rem.models.fuel_data_rates.FuelDataRates(
                        fuel_type = '', 
                        value = 1.337, 
                        units = '', 
                        rate_type = 'volumetric', )
                    ],
                emissions_factors = [
                    ra_rem.models.fuel_data.FuelData(
                        fuel_type = '', 
                        value = 1.337, 
                        units = '', )
                    ],
        )
        """

    def testSavings(self):
        """Test Savings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
